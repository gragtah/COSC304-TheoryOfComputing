
{- COSC 304
	Lab 8
	Gaurav Ragtah
-}



-- PART 1

spec1 (0, '#') = (0, '#', 'l')

spec1 (0, 'a') = (1, 'a', 'l')
spec1 (0, 'b') = (1, 'a', 'l')
spec1 (0, 'c') = (1, 'a', 'l')
spec1 (0, 'd') = (1, 'a', 'l')

spec1 (1, '#') = (2, '#', 'r')

spec1 (1, 'a') = (1, 'a', 'l')
spec1 (1, 'b') = (1, 'a', 'l')
spec1 (1, 'c') = (1, 'a', 'l')
spec1 (1, 'd') = (1, 'a', 'l')

spec1 (2, '#') = (100, '#', 'd')

spec1 (2, 'a') = (2, 'a', 'r')
spec1 (2, 'b') = (2, 'a', 'r')
spec1 (2, 'c') = (2, 'a', 'r')
spec1 (2, 'd') = (2, 'a', 'r')

{- spec1 begins with the start state, and proceeds toward the 
left, converting every character encountered to 'a'. Then after it encounters
the left end of the tape, it starts proceeding to the right overwriting everything 
with 'a' till it reaches the right end of the tape. Effectively, it overwrites the 
entire string with 'a's. 
-}





-- PART 2

val (x:str, 0) = x
val (x:str, post) = val (str, post - 1)

startstring str = if (val (str, 0) == '#' && val(str, (length str)-1) == '#') then str
					else '#':str ++ '#':""
startpos str = (length str) + 1 

str1 = "abcd"

{- Test result:
Main> val (startstring str1, startpos str1)
'#'
-}




-- PART 3

chstr (x:str, ch, 0) = ch: str
chstr (x:str, ch, pos) = x: chstr (str, ch, pos - 1)





-- PART 4

first(a,b,c) = a
second (a,b,c) = b
third (a,b,c) = c
pcalc (state, ch, pos) = if (third (spec1 (state,ch)) == 'l') then (pos-1)
				else (if (third (spec1 (state,ch)) == 'r') then (pos +1)
						else pos)
						
 
move(str,state,ch,pos) = (chstr (str,(second(spec1 (state,ch))),pos), first(spec1 (state,ch)), val (str,pcalc (state, ch, pos)), pcalc (state, ch, pos))

{- Type structure of move is:
move :: (Num a, Num b, Num c) => ([Char],b,Char,a) -> ([Char],c,Char,a)
it works as expected and can be called more than once!
-}




-- PART 5

run (str, 100, ch, pos) = (str, 100, ch, pos)
run (str, state, ch, pos) = run (move (startstring str, state, ch, pos))

startrun str = run (startstring str, 0, '#', (length (startstring str)) - 1)

{- TESTING results:

Main> startrun str1
("#aaaa#",100,'#',5)
Main> startrun "bbccaa"
("#aaaaaa#",100,'#',7)
Main> startrun "bb#cd"
("#bb#aa#",100,'#',6)

-}
