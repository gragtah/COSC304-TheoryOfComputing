
{- COSC 304
	Lab 9
	Gaurav Ragtah
-}


-- Following is Lab 8 copied and modified suitably for Lab 9 functionality

spec1 (0, '#') = (0, '#', 'l')

spec1 (0, 'a') = (1, 'a', 'l')
spec1 (0, 'b') = (1, 'a', 'l')
spec1 (0, 'c') = (1, 'a', 'l')
spec1 (0, 'd') = (1, 'a', 'l')

spec1 (1, '#') = (2, '#', 'r')

spec1 (1, 'a') = (1, 'a', 'l')
spec1 (1, 'b') = (1, 'a', 'l')
spec1 (1, 'c') = (1, 'a', 'l')
spec1 (1, 'd') = (1, 'a', 'l')

spec1 (2, '#') = (100, '#', 'd')

spec1 (2, 'a') = (2, 'a', 'r')
spec1 (2, 'b') = (2, 'a', 'r')
spec1 (2, 'c') = (2, 'a', 'r')
spec1 (2, 'd') = (2, 'a', 'r')

{- spec1 begins with the start state, and proceeds toward the 
left, converting every character encountered to 'a'. Then after it encounters
the left end of the tape, it starts proceeding to the right overwriting everything 
with 'a' till it reaches the right end of the tape. Effectively, it overwrites the 
entire string with 'a's. 
-}



val (x:str, 0) = x
val (x:str, post) = val (str, post - 1)

startstring str = if (val (str, 0) == '#' && val(str, (length str)-1) == '#') then str
					else '#':str ++ '#':""
startpos str = (length str) + 1 

str1 = "abcd"

{- Test result:
Main> val (startstring str1, startpos str1)
'#'
-}



chstr (x:str, ch, 0) = ch: str
chstr (x:str, ch, pos) = x: chstr (str, ch, pos - 1)



first(a,b,c) = a
second (a,b,c) = b
third (a,b,c) = c
pcalc tmspec (state, ch, pos) = if (third (tmspec (state,ch)) == 'l') then (pos-1)
				else (if (third (tmspec (state,ch)) == 'r') then (pos +1)
						else pos)
						
 
newmove tmspec (str,state,ch,pos) = (chstr (str,second(tmspec (state,ch)),pos), first(tmspec (state,ch)), val ((chstr (str,second(tmspec (state,ch)),pos)),pcalc tmspec (state, ch, pos)), pcalc tmspec (state, ch, pos))


newrun tmspec (str, 100, ch, pos) = (str, 100, ch, pos)
newrun tmspec (str, state, ch, pos) = newrun tmspec (newmove tmspec (startstring str, state, ch, pos))

newstartrun tmspec str = newrun tmspec (startstring str, 0, '#', (length (startstring str)) - 1)




-- Part 2: definition for spec2

spec2 (0, '#') = (1, '#', 'l')
spec2 (0, x) = (0, x, 'l')
spec2 (1, '#') = (2, '#', 'r')
spec2 (1, 'a') = (1, 'b', 'l')
spec2 (1, 'b') = (1, 'c', 'l')
spec2 (1, 'c') = (1, 'b', 'l')
spec2 (1, 'd') = (1, 'b', 'l')
spec2 (2, '#') = (100, '#', 'd')
spec2 (2, x) = (2, x, 'r')


{- Testing spec2 on str1:
Main> newstartrun spec2 str1
("#bcbb#",100,'#',5)
-}


-- Part 3: definition for spec3

spec3 (0, '#') = (1, '#', 'l')
spec3 (0, x) = (0, x, 'l')
spec3 (1, '#') = (2, '#', 'r')
spec3 (1, 'a') = (1, 'd', 'l')
spec3 (1, 'b') = (2, 'a', 'd')
--
spec3 (1, 'c') = (1, 'd', 'l')
spec3 (1, 'd') = (1, 'd', 'l')
spec3 (2, '#') = (100, '#', 'd')
spec3 (2, x) = (2, x, 'r')

{- Testing spec3 on str1 and "ccad":
Main> newstartrun spec3 str1
("#aadd#",100,'#',5)
Main> newstartrun spec3 "ccad"
("#dddd#",100,'#',5)
-}



-- Part 4

spec4 (0, '#') = (100, 'a', 'r') -- This will "add an a" to the end of a string function
spec4 (0, x) = (100, x, 'r')

{- Result of test on "aaa" :
Main> newstartrun spec4 "aaa"
("#aaaa",100,
Program error: pattern match failure: val ([],1 - 1)

This is because the TM initially overwrites the rightmost blank at position 4 with
an 'a' and then moves right. Now there's nothing on the right of the '#'s position and the
position parameter is more than the length of the string, so the function val gives an error

-}




-- Part 5

move2 tmspec (str,state,ch,pos) = if (pos> (length str) -2) then (newmove tmspec (str ++ "#", state, ch, pos))
									else (newmove tmspec (str, state, ch, pos))
										
run2 tmspec (str, 100, ch, pos) = (str, 100, ch, pos)
run2 tmspec (str, state, ch, pos) = run2 tmspec (move2 tmspec (startstring str, state, ch, pos))

startrun2 tmspec str = run2 tmspec (startstring str, 0, '#', (length (startstring str)) - 1)

{- Testing startrun2 on "aaa" and str1, successful:

Main> startrun2 spec4 "aaa"
("#aaaa#",100,'#',5)

Main> startrun2 spec4 str1
("#abcda#",100,'#',6)

-}

